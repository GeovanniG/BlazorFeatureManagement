@using FeatureManagement.Shared.Features
@using Microsoft.FeatureManagement
@inject IFeatureManager _featureManager

@if (IsFeatureEnabled)
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Requirement { get; set; }
    public const string All = "All";
    public const string Any = "Any";

    public bool IsFeatureEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Name))
        {
            IsFeatureEnabled = true;
            return;
        }

        var features = Name.Split(",");
        var featuresEnabled = await Task.WhenAll(
            features.Select(x => _featureManager.IsEnabledAsync(x.Trim()))
        );
        
        var requirement = Requirement?.ToUpperInvariant() switch
        {
            "ALL" => All,
            "ANY" => Any,
            _ => All
        };

        IsFeatureEnabled = requirement switch
        {
            All => featuresEnabled.All(x => x),
            Any => featuresEnabled.Any(x => x),
            _ => false
        };
    }
}
