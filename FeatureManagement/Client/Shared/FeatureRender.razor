@using FeatureManagement.Shared.Features
@using Microsoft.FeatureManagement
@inject IFeatureManager _featureManager

@if (IsFeatureEnabled)
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Requirement { get; set; }
    public string All => nameof(All);
    public string Any => nameof(Any);

    public bool IsFeatureEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Name))
        {
            return;
        }

        var requirement = Requirement?.ToUpperInvariant() switch
        {
            "ALL" => All,
            "ANY" => Any,
            _ => All
        };

        var features = Name.Split(",");
        var featuresEnabled = new List<bool>(await Task.WhenAll(
            features.Select(x => _featureManager.IsEnabledAsync(x.Trim()))));
        bool isFeatureEnabled = false;

        if (requirement == All)
        {
            isFeatureEnabled = featuresEnabled.All(x => x);
        }
        else if (requirement == Any)
        {
            isFeatureEnabled = featuresEnabled.Any(x => x);
        }

        IsFeatureEnabled = isFeatureEnabled;
    }
}
