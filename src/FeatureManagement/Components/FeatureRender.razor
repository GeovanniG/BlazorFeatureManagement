@using Microsoft.FeatureManagement
@inject IFeatureManager _featureManager

@if (IsFeatureEnabled)
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string? Name { get; set; }

    [Parameter] public string? Requirement { get; set; }

    public const string All = "All";
    public const string Any = "Any";
    
    public const string Not = "Not ";
    public const string Negation = "!";

    public bool IsFeatureEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Name))
        {
            IsFeatureEnabled = true;
            return;
        }

        var features = Name.Split(",").Select(x => x.Trim()).Where(x => !string.IsNullOrEmpty(x));

        var areFeaturesEnabled = await Task.WhenAll(
                features.Select(feature => 
                    _featureManager.IsEnabledAsync(removeNegation(feature))
                ));

        var featuresWithEnabledStatus = features.Zip(areFeaturesEnabled);

        var areFeaturesEnabledWithNegation = featuresWithEnabledStatus.Select(featureIsEnabled =>
        {
            var (feature, isEnabled) = featureIsEnabled;
            return isFeatureNegated(feature) ? !isEnabled : isEnabled;
        });

        var requirement = requirementOrDefault(Requirement);

        IsFeatureEnabled = requirement switch
        {
            All => areFeaturesEnabledWithNegation.All(x => x),
            Any => areFeaturesEnabledWithNegation.Any(x => x),
            _ => false
        };
    }

    private bool isFeatureNegated(string feature)
    {
        if (string.IsNullOrEmpty(feature))
        {
            return false;
        }

        return feature.StartsWith(Not, StringComparison.OrdinalIgnoreCase)
               || feature.StartsWith(Negation, StringComparison.OrdinalIgnoreCase);
    }

    private string removeNegation(string feature)
    {
        if (string.IsNullOrEmpty(feature))
        {
            return string.Empty;
        }

        return feature switch
        {
            var x when x.StartsWith(Not, StringComparison.OrdinalIgnoreCase) => feature.Substring(Not.Length),
            var x when x.StartsWith(Negation, StringComparison.OrdinalIgnoreCase) => feature.Substring(Negation.Length),
            _ => feature
        };
    }

    private string requirementOrDefault(string? requirement)
    {
        return requirement?.ToUpperInvariant() switch
        {
            "ALL" => All,
            "ANY" => Any,
            _ => All
        };
    }
}
